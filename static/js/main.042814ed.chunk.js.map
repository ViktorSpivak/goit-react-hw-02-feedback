{"version":3,"sources":["components/Section.jsx","components/FeedbackOptions.jsx","components/StatisticData.jsx","components/Notification.jsx","components/Feedback.jsx","index.js"],"names":["Section","title","children","FeedbackOptions","onLeaveFeedback","type","onClick","name","StatisticsData","good","neutral","bad","total","positivePercentage","Notification","message","Feedback","state","handleChangeFeedback","ev","buttonName","target","setState","props","step","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"2NAOeA,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICaUC,EAfS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,kBAAC,WAAD,KACE,4BAAQC,KAAK,SAASC,QAASF,EAAiBG,KAAK,QAArD,QAGA,4BAAQF,KAAK,SAASC,QAASF,EAAiBG,KAAK,WAArD,WAGA,4BAAQF,KAAK,SAASC,QAASF,EAAiBG,KAAK,OAArD,SCDSC,EATQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACrB,6BACE,mCAASJ,GACT,sCAAYC,GACZ,kCAAQC,GACR,oCAAUC,KACV,+CAAqBC,IAArB,OCDWC,EALM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,kBAAC,WAAD,KACE,4BAAKA,KCIIC,EAAb,2MAOEC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,GAVT,EAaEO,qBAAuB,SAAAC,GACrB,IAAMC,EAAaD,EAAGE,OAAOd,KACd,QAAfa,GACE,EAAKE,UAAS,SAAAL,GAAK,MAAK,CACtBN,IAAKM,EAAMN,IAAM,EAAKY,MAAMC,SAEjB,YAAfJ,GACE,EAAKE,UAAS,SAAAL,GAAK,MAAK,CACtBP,QAASO,EAAMP,QAAU,EAAKa,MAAMC,SAEzB,SAAfJ,GACE,EAAKE,UAAS,SAAAL,GAAK,MAAK,CACtBR,KAAMQ,EAAMR,KAAO,EAAKc,MAAMC,UAzBtC,EA6BEC,mBAAqB,kBACnB,EAAKR,MAAMR,KAAO,EAAKQ,MAAMP,QAAU,EAAKO,MAAMN,KA9BtD,EA+BEe,gCAAkC,kBAChCC,KAAKC,MACF,EAAKX,MAAMR,MACT,EAAKQ,MAAMR,KAAO,EAAKQ,MAAMP,QAAU,EAAKO,MAAMN,KACnD,MAnCR,wEAqCY,IAAD,EACwBkB,KAAKZ,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,6BACE,kBAAC,EAAD,CAASV,MAAM,yBACb,kBAAC,EAAD,CAAiBG,gBAAiByB,KAAKX,wBAEzC,kBAAC,EAAD,CAASjB,MAAM,cACH,IAATQ,GAA0B,IAAZC,GAAyB,IAARC,EAC9B,kBAAC,EAAD,CAAcI,QAAQ,sBAEtB,kBAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOiB,KAAKJ,mBACZZ,mBAAoBgB,KAAKH,wCArDvC,GAA8BI,aAAjBd,EACJe,aAAe,CACpBP,KAAM,GA4DKR,QCjEfgB,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,U","file":"static/js/main.042814ed.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\nexport default Section;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\r\n  return (\r\n    <Fragment>\r\n      <button type=\"button\" onClick={onLeaveFeedback} name=\"good\">\r\n        Good\r\n      </button>\r\n      <button type=\"button\" onClick={onLeaveFeedback} name=\"neutral\">\r\n        Neutral\r\n      </button>\r\n      <button type=\"button\" onClick={onLeaveFeedback} name=\"bad\">\r\n        Bad\r\n      </button>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nconst StatisticsData = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <p>Good:{good}</p>\r\n    <p>Neutral:{neutral}</p>\r\n    <p>Bad:{bad}</p>\r\n    <p>Total:{total()}</p>\r\n    <p>Positiv feedback:{positivePercentage()}%</p>\r\n  </div>\r\n);\r\nexport default StatisticsData;\r\n","import React, { Fragment } from \"react\";\r\nconst Notification = ({ message }) => (\r\n  <Fragment>\r\n    <h2>{message}</h2>\r\n  </Fragment>\r\n);\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Section from \"./Section\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport StatisticsData from \"./StatisticData\";\r\nimport Notification from \"./Notification\";\r\n\r\nexport class Feedback extends Component {\r\n  static defaultProps = {\r\n    step: 1\r\n  };\r\n  static propTypes = {\r\n    step: PropTypes.number\r\n  };\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n\r\n  handleChangeFeedback = ev => {\r\n    const buttonName = ev.target.name;\r\n    buttonName === \"bad\" &&\r\n      this.setState(state => ({\r\n        bad: state.bad + this.props.step\r\n      }));\r\n    buttonName === \"neutral\" &&\r\n      this.setState(state => ({\r\n        neutral: state.neutral + this.props.step\r\n      }));\r\n    buttonName === \"good\" &&\r\n      this.setState(state => ({\r\n        good: state.good + this.props.step\r\n      }));\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.round(\r\n      (this.state.good /\r\n        (this.state.good + this.state.neutral + this.state.bad)) *\r\n        100\r\n    );\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions onLeaveFeedback={this.handleChangeFeedback} />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {good === 0 && neutral === 0 && bad === 0 ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <StatisticsData\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback}\r\n              positivePercentage={this.countPositiveFeedbackPercentage}\r\n            />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Feedback from \"./components/Feedback\";\n\nReactDOM.render(<Feedback />, document.getElementById(\"root\"));\n"],"sourceRoot":""}